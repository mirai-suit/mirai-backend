// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum OrganizationRole {
  ADMIN
  EDITOR
  MEMBER
}

model User {
  id               String             @id @default(uuid())
  firstName        String
  lastName         String
  avatar           String?
  email            String             @unique
  password         String
  refreshToken     RefreshToken?
  refreshTokenId   String?            @unique
  organizationUser OrganizationUser[]
  UserPreferences  UserPreferences[]
  teams            Team[]
  tasks            Task[]
  boardAccess      BoardAccess[]
  createdOrganizations Organization[] @relation("OrganizationCreator")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("user_")
}

model RefreshToken {
  id          String           @id @default(uuid())
  token       String           @unique
  userId      String           @unique @map("user_id")
  user        User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime         @map("expires_at")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  teams       Team[]
  tasks       Task[]

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}

model UserPreferences {
  id                String         @id @default(uuid())
  theme             String         @default("light")
  language          String         @default("en")
  notificationOptIn Boolean        @default(true)
  timezone          String?
  dateFormat        String         @default("YYYY-MM-DD")
  timeFormat        String         @default("24h")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String?        @unique
  user              User?          @relation(fields: [userId], references: [id])

  @@map("user_preferences")
}

model Organization {
  id               String             @id @default(uuid())
  name             String
  creatorId        String?            // Track who created the organization
  creator          User?              @relation("OrganizationCreator", fields: [creatorId], references: [id])
  boards           Board[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  organizationUser OrganizationUser[]

  @@map("organizations")
}

model OrganizationUser {
  id             String           @id @default(uuid())
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  role           OrganizationRole @default(MEMBER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([organizationId, userId])
  @@map("organization_users")
}

model Team {
  id             String        @id @default(uuid())
  name           String
  users          User[]
  board          Board?        @relation("BoardTeams", fields: [boardId], references: [id])
  boardId        String?
  Task           Task[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  refreshToken   RefreshToken? @relation(fields: [refreshTokenId], references: [id])
  refreshTokenId String?

  @@map("teams")
}

model Board {
  id             String        @id @default(uuid())
  title          String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  teamId         String?
  columns        Column[]      
  description    String?
  color          String        @default("#3B82F6") // Default blue color
  coverImage     String?       // Board cover image URL
  isArchived     Boolean       @default(false)
  isPublic       Boolean       @default(false)
  isTemplate     Boolean       @default(false)
  isPrivate      Boolean       @default(false)
  isReadOnly     Boolean       @default(false)
  isShared       Boolean       @default(false)
  isDefault      Boolean       @default(false)
  deletedAt      DateTime?     // Soft delete timestamp
  deletedBy      String?       // User ID who deleted the board
  team           Team[]        @relation("BoardTeams")
  tasks          Task[]
  accessList     BoardAccess[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("boards")
}

model Column {
  id             String        @id @default(uuid())
  name           String
  color          String        @default("#6B7280") // Default gray color
  order          Int           @default(0) // For column ordering
  board          Board         @relation(fields: [boardId], references: [id])
  boardId        String
  tasks          Task[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("columns")
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  BLOCKED
  UNDER_REVIEW
  COMPLETED
  CANCELLED
  CUSTOM
}

enum TaskPriority {
  LOWEST
  LOW
  MEDIUM
  HIGH
  HIGHEST
}

model Task {
  id             String        @id @default(uuid())
  title          String
  description    String?
  status         TaskStatus    @default(NOT_STARTED)
  customStatus   String?       // For user-defined statuses when status = CUSTOM
  startDate      DateTime?     // Task start date
  dueDate        DateTime?     // Task due date
  priority       TaskPriority? @default(MEDIUM)
  order          Int           @default(0)
  column         Column        @relation(fields: [columnId], references: [id])
  columnId       String
  isRecurring    Boolean       @default(false)
  assignees      User[]
  board          Board         @relation(fields: [boardId], references: [id])
  boardId        String
  team           Team?         @relation(fields: [teamId], references: [id])
  teamId         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  RefreshToken   RefreshToken? @relation(fields: [refreshTokenId], references: [id])
  refreshTokenId String?

  @@map("tasks")
}

model BoardAccess {
  id         String @id @default(uuid())
  user       User   @relation(fields: [userId], references: [id])
  userId     String
  board      Board  @relation(fields: [boardId], references: [id])
  boardId    String
  accessRole String @default("MEMBER") // Default access role can be MEMBER, EDITOR, or ADMI  N

  @@unique([userId, boardId])
  @@map("board_access")
}

// model user {
//   id        String   @id @default(uuid())
//   firstName String   @map("first_name")
//   lastName  String   @map("last_name")
//   username  String  @unique
//   email     String  @unique
//   password  String
//   isEmailVerified Boolean @default(false) @map("is_email_verified")
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//   roles     String[]  
//   OTP otp[]
//   refreshToken refreshToken[]

//   @@index([id])
//   @@map("users")
// }

// model otp {
//   id          String   @id @default(uuid())
//   userId      String
//   otpHash     String   // Hashed OTP
//   purpose     String   @default("email_verification")// Purpose of the OTP (e.g., "email_verification", "password_reset")
//   expiresAt   DateTime @map("expires_at") // Expiration time for the OTP
//   attempts    Int      @default(0) 
//   requestedAt DateTime @default(now()) @map("requested_at")
//   isActive   Boolean  @default(true) @map("is_active") // Flag to indicate if OTP is still active
//   user        user     @relation(fields: [userId], references: [id])
//   @@index([userId]) // Index for quick lookup by user
//   @@map("otp")
// }

// model refreshToken {
//   id          String   @id @default(uuid())
//   token       String   @unique
//   userId      String   @map("user_id")
//   user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   expiresAt   DateTime @map("expires_at")
//   createdAt   DateTime @default(now()) @map("created_at")
//   updatedAt   DateTime @updatedAt @map("updated_at")

//   @@index([userId])
//   @@index([token])
//   @@map("refresh_tokens")
// }
